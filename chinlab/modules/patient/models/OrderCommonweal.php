<?php

namespace app\modules\patient\models;

use Yii;
use yii\db\ActiveRecord;
use yii\behaviors\TimestampBehavior;
use app\modules\patient\behavior\OrderStateUpdateBehavior;
/**
 * This is the model class for table "order_commonweal".
 *
 * @property integer $order_id
 * @property integer $user_id
 * @property string $requirement
 * @property string $disease_desc
 * @property string $patient_info
 * @property string $process_record
 * @property string $select_info
 * @property integer $order_type
 * @property integer $can_pay
 * @property string $pay_money
 * @property integer $order_state
 * @property integer $create_time
 * @property integer $update_time
 * @property integer $is_delete
 */
class OrderCommonweal extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'order_commonweal';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [];
    }
    
    
    public function afterSave($insert, $changedAttributes)
    {
    
    	parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    	$this->orderDowith($insert,$changedAttributes);
    }
     
    private function orderDowith($insert,$changedAttributes)
    {
    	$data = $this->toArray();
    	if(!isset($data['order_id'])){
    		return '';
    	}
    	$command = Yii::$app->db;
    	foreach($data as $k => $v) {
    		if (!is_string($v) && !is_int($v)) {
    			unset($data[$k]);
    		}
    	}
    	if($insert) {
    		//这里是新增数据
    		return  $command->createCommand()->insert(
    				'order_multi_backend', $data)->execute();
    	} else {
    		//这里是更新数据
    		return  $command->createCommand()->update(
    				'order_multi_backend', $data,
    				'order_id=:order_id',[':order_id'=>$data['order_id']])->execute();
    	}
    }
    
    

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['create_time', 'update_time'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['update_time'],
                ],
                //'value' => new Expression('NOW()'),
            ],
            [
                'class' => OrderStateUpdateBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'order_id' => 'Order ID',
            'user_id' => 'User ID',
            'requirement' => 'Requirement',
            'disease_desc' => 'Disease Desc',
            'patient_info' => 'Patient Info',
            'process_record' => 'Process Record',
            'select_info' => 'Select Info',
            'order_type' => 'Order Type',
            'can_pay' => 'Can Pay',
            'pay_money' => 'Pay Money',
            'order_state' => 'Order State',
            'create_time' => 'Create Time',
            'update_time' => 'Update Time',
            'is_delete' => 'Is Delete',
        ];
    }
}
